provider "aws" {
  region     = "eu-west-1"
}


variable vpc_cidr_block {}
variable subnet_cidr_block {}
variable avail_zone {}
variable env_prefix {}
variable my-ip {}
variable myinstance_type {} 
variable my-pub-key {}
resource "aws_vpc" "main_dina" {
  cidr_block = var.vpc_cidr_block
  tags = {
    Name = "${var.env_prefix}-vpc"
  }
}

resource "aws_subnet" "main_dina_subnet" {
  vpc_id = aws_vpc.main_dina.id
  cidr_block = var.subnet_cidr_block

  availability_zone = var.avail_zone
  tags = {
    Name = "${var.env_prefix}-subnet-1"
  }
  }

resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.main_dina.id
  tags = {
    Name = "${var.env_prefix}-igw"
  }

}


resource "aws_route_table" "dina_route_table" {
  vpc_id = aws_vpc.main_dina.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.gw.id
  }
  tags = {
    Name = "${var.env_prefix}-rtb"
  }
}

resource "aws_route_table_association" "a" {
  subnet_id      = aws_subnet.main_dina_subnet.id
  route_table_id = aws_route_table.dina_route_table.id
}

resource "aws_security_group" "my_sg" {
  name = "my_sg"
  vpc_id = aws_vpc.main_dina.id

  ingress{
    cidr_blocks   = [var.my-ip]
    from_port   = 22
    protocol = "tcp"
    to_port     = 22
  }
  ingress{
    cidr_blocks   = ["0.0.0.0/0"]
    from_port   = 8080
    protocol = "tcp"
    to_port     = 8080
  }

  egress{
    cidr_blocks   = ["0.0.0.0/0"]
    from_port   = 0
    protocol = "-1"
    to_port     = 0
    prefix_list_ids = []
  }

  tags = {
    Name = "${var.env_prefix}-sg"
  }
}


resource "aws_key_pair" "deployer" {
  key_name   = "deployer-key"
  public_key = "${file(var.my-pub-key)}"
}


data "aws_ami" "latest-linux-image"{
  
  most_recent = true
  owners = [ "amazon" ]
  filter {
    name = "name"
    values = [ "al2023-ami-*-x86_64" ]
  }
  # filter {
  #   name = "virtualization_type"
  #   values = [ "hvm" ]
  # }

}

#this output in terraform plan will fetch that AMI data to make sure that filters are correct
#and if you need id only add data.aws_ami.latest-linux-image.id
output "aws_ami_id" {
  value = data.aws_ami.latest-linux-image
}
output "ec2_public_id" {
  value = aws_instance.mydina_ec2.public_ip
}


resource "aws_instance" "mydina_ec2" {
  ami = data.aws_ami.latest-linux-image.id
  instance_type = var.myinstance_type

  subnet_id = aws_subnet.main_dina_subnet.id
  vpc_security_group_ids = [ aws_security_group.my_sg.id ]
  availability_zone = var.avail_zone
  associate_public_ip_address = true 

#i create on aws and save it in .ssh and chmod 400
#  "#its name on aws after the above steps"/or autogenerated 
  key_name = aws_key_pair.deployer.key_name
  
  
  tags = {
    Name =  "${var.env_prefix}-ec2"
  }

  user_data = file("entry-script.sh")
}














# data "aws_vpc" "existing_vpc"{
#   default = true
# }

# resource "aws_subnet" "main_dina_subnet2" {
#   vpc_id = data.aws_vpc.existing_vpc.id
#   cidr_block = "172.31.48.0/20"
#   availability_zone = "eu-west-1a"

# }